   



          handle the pop-up
	-----------------------


There are two types of alerts that we would be focusing on majorly:

Windows based alert pop ups
Web based alert pop ups

As we know that handling windows based pop ups is beyond WebDriver’s capabilities, thus we would exercise some third party utilities to handle window pop ups.

Handling pop up is one of the most challenging piece of work to automate while testing web applications. Owing to the diversity in types of pop ups complexes the situation even more.

What is Alert box/ Pop up box/ confirmation Box/ Prompt/ Authentication Box?

It is nothing but a small box that appears on the display screen to give you some kind of information or to warn you about a potentially damaging operation or it may even ask you for the permissions for the operation.

Example: Let us consider a real life example for a better understanding; Let us assume that we uploaded a photograph on any of these popular social networking sites. Later on, i wish to delete the uploaded photograph. So in order to delete, i clicked on the delete button. As soon as I click on the delete button, the system warns me against my action, prompting – Do you really want to delete the file? So now we have an option to either accept this alert or reject it.

So ahead in the session, let’s see how do we reject or accept the alerts depending on their types. Starting with the web based pop ups.

Web Based Popups

webdriver alerts 1

Let us see how do we handle them using WebDriver.

Handling web based pop-up box

WebDriver offers the users with a very efficient way to handle these pop ups using Alert interface.

There are the four methods that we would be using along with the Alert interface.

1) void dismiss() – The dismiss() method clicks on the “Cancel” button as soon as the pop up window appears.
2) void accept() – The accept() method clicks on the “Ok” button as soon as the pop up window appears.
3) String getText() – The getText() method returns the text displayed on the alert box.
4) void sendKeys(String stringToSend) – The sendKeys() method enters the specified string pattern into the alert box.

Let us move ahead and look at the actual implementation.

Explanation of Application under Test

We have designed a web page in a way to include a few fundamental types of web elements. This is the same application we introduced while discussing Select class earlier in this series.

Hyperlink: The two hyperlinks namely “Google” and “abodeQA” have been provided that re-directs the user to “http://www.google.com/” and “http://www.abodeqa.com/” respectively on the click event.
Dropdown: The three hyperlinks have been created for selecting colors, fruits and animals with a value set to default.
Button: A “try it” button has been created to show up the pop up box having OK and Cancel buttons upon click event.



1
<!DOCTYPE html></pre>
2
<html>
3
<head><title> Testing Select Class </title>
4
<body>
5
<div id="header">
6
<ul id="linkTabs">
7
<li>
8
<a href="https://www.google.com/">Google</a>
9
</li>
10
<li>
11
<a href="http://abodeqa.wordpress.com/">abodeQA</a>
12
</li>
13
</ul>
14
</div>
15
<div class="header_spacer"></div>
16
<div id="container">
17
<div id="content" style="padding-left: 185px;">
18
<table id="selectTable">
19
<tbody>
20
<tr>
21
<td>
22
<div>
23
<select id="SelectID_One">
24
<option value="redvalue">Red</option>
25
<option value="greenvalue">Green</option>
26
<option value="yellowvalue">Yellow</option>
27
<option value="greyvalue">Grey</option>
28
</select>
29
</div>
30
</td>
31
<td>
32
<div>
33
<select id="SelectID_Two">
34
<option value="applevalue">Apple</option>
35
<option value="orangevalue">Orange</option>
36
<option value="mangovalue">Mango</option>
37
<option value="limevalue">Lime</option>
38
</select>
39
</div>
40
</td>
41
<td>
42
<div>
43
<select id="SelectID_Three">
44
<option value="selectValue">Select</option>
45
<option value="elephantvalue">Elephant</option>
46
<option value="mousevalue">Mouse</option>
47
<option value="dogvalue">Dog</option>
48
</select>
49
</div>
50
</td>
51
</tr>
52
<tr>
53
<td>
54
 
55
<!DOCTYPE html>
56
<html>
57
<body>
58
<p>Click the button to display a confirm box.</p>
59
<button onclick="myFunction()">Try it</button>
60
 
61
<script>
62
function myFunction()
63
{
64
confirm("Press a button!");
65
}
66
</script>
67
</body>
68
</html>
69
</td>
70
</tr>
71
</tbody>
72
</table>
73
</div>
74
</div>
75
</body>
76
</html>
Scenario to be automated

Launch the web browser and open the webpage
Click on the “Try it” button
Accept the alert
Click on the “Try it” button again
Reject the alert
WebDriver Code using Select Class

Please take a note that for script creation, we would be using “Learning_Selenium” project created in the former tutorial.

Step 1: Create a new java class named as “DemoWebAlert” under the “Learning_Selenium” project.
Step 2: Copy and paste the below code in the “DemoWebAlert.java” class.

Below is the test script that is equivalent to the above mentioned scenario.

1
import org.junit.After;
2
import org.junit.Before;
3
import org.junit.Test;
4
import org.openqa.selenium.Alert;
5
import org.openqa.selenium.By;
6
import org.openqa.selenium.WebDriver;
7
import org.openqa.selenium.firefox.FirefoxDriver;
8
 
9
/**
10
* class description
11
*/
12
 
13
public class DemoWebAlert {
14
                WebDriver driver;
15
                /**
16
                * Constructor
17
                */
18
                public DemoWebAlert() {                            
19
                }
20
 
21
                /**
22
                * Set up browser settings and open the application
23
                */
24
 
25
                @Before
26
                public void setUp() {
27
                                driver=new FirefoxDriver();
28
                                // Opened the application
29
                                driver.get("file:///F:/Work/Selenium/Testing-Presentation/DemoWebPopup.htm");
30
                                driver.manage().window().maximize();
31
                }
32
 
33
                /**
34
                * Test to check Select functionality
35
                * @throws InterruptedException
36
                */
37
 
38
                @Test
39
                public void testWebAlert() throws InterruptedException {                          
40
                                // clicking on try it button
41
                                driver.findElement(By.xpath("//button[contains(text(),'Try it')]")).click();
42
                                Thread.sleep(5000);
43
 
44
                                // accepting javascript alert
45
                                Alert alert = driver.switchTo().alert();
46
                                alert.accept();
47
 
48
                                // clicking on try it button
49
                                driver.findElement(By.xpath("//button[contains(text(),'Try it')]")).click();
50
                                Thread.sleep(5000);
51
 
52
                                // accepting javascript alert
53
                                driver.switchTo().alert().dismiss();
54
 
55
                                // clicking on try it button
56
                                driver.findElement(By.xpath("//button[contains(text(),'Try it')]")).click();
57
                                Thread.sleep(5000);
58
 
59
                                // accepting javascript alert
60
                                System.out.println(driver.switchTo().alert().getText());
61
                                driver.switchTo().alert().accept();
62
                }
63
 
64
                /**
65
                * Tear down the setup after test completes
66
                */
67
 
68
                @After
69
                public void tearDown() {             
70
                    driver.quit();
71
                }
72
}


===========================================================================================

          How to get total number of fram with name

		  
		     //Assume driver is initialized properly. 
    List<WebElement> ele = driver.findElements(By.tagName("frame"));
    System.out.println("Number of frames in a page :" + ele.size());
    for(WebElement el : ele){
      //Returns the Id of a frame.
        System.out.println("Frame Id :" + el.getAttribute("id"));
      //Returns the Name of a frame.
        System.out.println("Frame name :" + el.getAttribute("name"));
    }

===================================================================================



How to read excel file
-----------------------

first need to add Jxl.jar file


code
-----



 Workbook workbook = Workbook.getWorkbook(New File ("path"));

         Sheet sheet=workbook.getsheet("sa1");

	 int row=sheet.getrow();
         int column=sheet.getColumn();

        for(int i=0; i<=row; i++){

	   for(int j=0; j<=column; j++){

	
		String cellContent = sheet.getcell(j,i).getcontent();
		}

            }



How to write excel sheet
------------------------

Create excel workwork


   fileOutputstream fo = new fileoutputStream("path where u want create excel") 

     WritableWorkbook wwb = workbook.createWorkbook(fo);

      writableSheet wrs1 = wwb.createsheet("sheet name", no);
      writeableSheet wrs2= wwb.createsheet("sheet name", no);





Page Object Model | POM

Creating Selenium test cases can result in an unmaintainable project. One of the reasons is that too many duplicated code is used. Duplicated code could be caused
 by duplicated functionality and this will result in duplicated usage of locators. The disadvantage of duplicated code is that the project is less maintainable.
 If some locator will change, you have to walk through the whole test code to adjust locators where necessary. By using the page object model we can make non-brittle
 test code and reduce or eliminate duplicate test code. Beside of that it improves the readability and allows us to create interactive documentation. Last but not least,
 we can create tests with less keystroke. An implementation of the page object model can be achieved by separating the abstraction of the test object and the test scripts.

Note: We will follow the same example which we have used in First Test Case. Let’s assume it our base test case and implement the Page Object Model (POM) in it.





















